circuit Level2_cache :
  module Memory :
    input clock : Clock
    input reset : Reset
    output io : { flip addr : UInt<32>, readData : UInt<512>[4], flip writeData : UInt<512>[4], flip writeEnable : UInt<1>, hit : UInt<1>, flip hit_ready : UInt<1>, flip replace_ready : UInt<1>, replace : UInt<1>, replace_addr : UInt<32>, flip full_line : UInt<1>}

    smem mem : { valid : UInt<1>, tag : UInt<11>, data : UInt<512>[4], dirty : UInt<1>} [8192] @[cache_mem.scala 28:24]
    node offset = bits(io.addr, 7, 6) @[cache_mem.scala 30:23]
    node index = bits(io.addr, 20, 8) @[cache_mem.scala 31:22]
    node tag = bits(io.addr, 31, 21) @[cache_mem.scala 32:20]
    wire _cacheLineRead_WIRE : UInt @[cache_mem.scala 35:31]
    _cacheLineRead_WIRE is invalid @[cache_mem.scala 35:31]
    when UInt<1>("h1") : @[cache_mem.scala 35:31]
      _cacheLineRead_WIRE <= index @[cache_mem.scala 35:31]
      node _cacheLineRead_T = or(_cacheLineRead_WIRE, UInt<13>("h0")) @[cache_mem.scala 35:31]
      node _cacheLineRead_T_1 = bits(_cacheLineRead_T, 12, 0) @[cache_mem.scala 35:31]
      read mport cacheLineRead = mem[_cacheLineRead_T_1], clock @[cache_mem.scala 35:31]
    io.readData <= cacheLineRead.data @[cache_mem.scala 36:15]
    node _io_hit_T = and(io.hit_ready, cacheLineRead.valid) @[cache_mem.scala 38:26]
    node _io_hit_T_1 = eq(cacheLineRead.tag, tag) @[cache_mem.scala 38:71]
    node _io_hit_T_2 = and(_io_hit_T, _io_hit_T_1) @[cache_mem.scala 38:49]
    io.hit <= _io_hit_T_2 @[cache_mem.scala 38:10]
    node io_replace_addr_hi = cat(cacheLineRead.tag, index) @[Cat.scala 33:92]
    node _io_replace_addr_T = cat(io_replace_addr_hi, UInt<8>("h0")) @[Cat.scala 33:92]
    io.replace_addr <= _io_replace_addr_T @[cache_mem.scala 40:19]
    node _io_replace_T = and(cacheLineRead.valid, io.replace_ready) @[cache_mem.scala 41:37]
    node _io_replace_T_1 = eq(cacheLineRead.tag, tag) @[cache_mem.scala 41:79]
    node _io_replace_T_2 = eq(_io_replace_T_1, UInt<1>("h0")) @[cache_mem.scala 41:60]
    node _io_replace_T_3 = and(_io_replace_T, _io_replace_T_2) @[cache_mem.scala 41:57]
    node _io_replace_T_4 = and(_io_replace_T_3, cacheLineRead.dirty) @[cache_mem.scala 41:87]
    io.replace <= _io_replace_T_4 @[cache_mem.scala 41:14]
    when io.writeEnable : @[cache_mem.scala 46:24]
      wire newCacheLine : { valid : UInt<1>, tag : UInt<11>, data : UInt<512>[4], dirty : UInt<1>} @[cache_mem.scala 47:28]
      when io.full_line : @[cache_mem.scala 48:23]
        newCacheLine.dirty <= UInt<1>("h0") @[cache_mem.scala 49:26]
      else :
        newCacheLine.dirty <= UInt<1>("h1") @[cache_mem.scala 51:26]
      newCacheLine.valid <= UInt<1>("h1") @[cache_mem.scala 53:24]
      newCacheLine.data <= io.writeData @[cache_mem.scala 54:23]
      newCacheLine.tag <= tag @[cache_mem.scala 55:22]
      write mport MPORT = mem[index], clock
      MPORT <= newCacheLine

  module Level2_cache :
    input clock : Clock
    input reset : UInt<1>
    output io : { axi : { flip AWID : UInt<2>, flip AWADDR : UInt<32>, flip AWVALID : UInt<1>, AWREADY : UInt<1>, flip WVALID : UInt<1>, flip WDATA : UInt<64>, WREADY : UInt<1>, flip WLAST : UInt<1>, BRESP : UInt<2>, flip BREADY : UInt<1>, BVALID : UInt<1>, flip ARID : UInt<2>, flip ARADDR : UInt<32>, flip ARVALID : UInt<1>, ARREADY : UInt<1>, RDATA : UInt<64>, RID : UInt<2>, flip RREADY : UInt<1>, RVALID : UInt<1>, RRESP : UInt<2>, RLAST : UInt<1>}, flip mem_axi : { flip AWADDR : UInt<32>, flip AWVALID : UInt<1>, AWREADY : UInt<1>, flip AWCACHE : UInt<4>, flip AWLEN : UInt<8>, flip AWSIZE : UInt<3>, flip AWLOCK : UInt<2>, flip AWPROT : UInt<3>, flip AWQOS : UInt<4>, flip AWBURST : UInt<2>, flip AWID : UInt<2>, flip WVALID : UInt<1>, flip WDATA : UInt<256>, WREADY : UInt<1>, flip WSTRB : UInt<32>, flip WLAST : UInt<1>, BRESP : UInt<2>, BVALID : UInt<1>, flip BREADY : UInt<1>, flip ARID : UInt<2>, flip ARADDR : UInt<32>, flip ARVALID : UInt<1>, ARREADY : UInt<1>, flip ARLEN : UInt<8>, flip ARSIZE : UInt<3>, flip ARBURST : UInt<2>, flip ARLOCK : UInt<2>, flip ARCACHE : UInt<4>, flip ARPROT : UInt<3>, flip ARQOS : UInt<4>, RID : UInt<2>, RDATA : UInt<256>, RRESP : UInt<2>, RLAST : UInt<1>, RVALID : UInt<1>, flip RREADY : UInt<1>}}

    inst cacheMem of Memory @[cache_phase1.scala 18:26]
    cacheMem.clock <= clock
    cacheMem.reset <= reset
    reg state : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[cache_phase1.scala 25:22]
    reg memReadBeatCounter : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[cache_phase1.scala 28:37]
    reg coreReadBeatCounter : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[cache_phase1.scala 29:38]
    reg coreDataWriteCounter : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[cache_phase1.scala 32:39]
    reg memDataWriteCounter : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[cache_phase1.scala 33:38]
    wire _replace_address_Buffer_WIRE : { addr : UInt<32>, valid : UInt<1>}
    _replace_address_Buffer_WIRE.valid <= UInt<1>("h0")
    _replace_address_Buffer_WIRE.addr <= UInt<1>("h0")
    reg replace_address_Buffer : { addr : UInt<32>, valid : UInt<1>}, clock with :
      reset => (reset, _replace_address_Buffer_WIRE) @[cache_phase1.scala 36:39]
    wire _replace_data_buffer_WIRE : { data : UInt<256>, valid : UInt<1>}[8] @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[0].valid <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[0].data <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[1].valid <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[1].data <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[2].valid <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[2].data <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[3].valid <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[3].data <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[4].valid <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[4].data <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[5].valid <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[5].data <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[6].valid <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[6].data <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[7].valid <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    _replace_data_buffer_WIRE[7].data <= UInt<1>("h0") @[cache_phase1.scala 44:44]
    reg replace_data_buffer : { data : UInt<256>, valid : UInt<1>}[8], clock with :
      reset => (reset, _replace_data_buffer_WIRE) @[cache_phase1.scala 44:36]
    wire _inputReadAddrBuffer_WIRE : { id : UInt<2>, addr : UInt<32>, len : UInt<8>, valid : UInt<1>}
    _inputReadAddrBuffer_WIRE.valid <= UInt<1>("h0")
    _inputReadAddrBuffer_WIRE.len <= UInt<3>("h7")
    _inputReadAddrBuffer_WIRE.addr <= UInt<23>("h569adf")
    _inputReadAddrBuffer_WIRE.id <= UInt<1>("h0")
    reg inputReadAddrBuffer : { id : UInt<2>, addr : UInt<32>, len : UInt<8>, valid : UInt<1>}, clock with :
      reset => (reset, _inputReadAddrBuffer_WIRE) @[cache_phase1.scala 54:38]
    wire _inputDataBuffer_WIRE : { data : UInt<64>, valid : UInt<1>, wstrb : UInt<8>}[8] @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[0].wstrb is invalid @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[0].valid <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[0].data <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[1].wstrb is invalid @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[1].valid <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[1].data <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[2].wstrb is invalid @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[2].valid <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[2].data <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[3].wstrb is invalid @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[3].valid <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[3].data <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[4].wstrb is invalid @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[4].valid <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[4].data <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[5].wstrb is invalid @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[5].valid <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[5].data <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[6].wstrb is invalid @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[6].valid <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[6].data <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[7].wstrb is invalid @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[7].valid <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    _inputDataBuffer_WIRE[7].data <= UInt<1>("h0") @[cache_phase1.scala 79:40]
    reg inputDataBuffer : { data : UInt<64>, valid : UInt<1>, wstrb : UInt<8>}[8], clock with :
      reset => (reset, _inputDataBuffer_WIRE) @[cache_phase1.scala 79:32]
    wire _memDataReadAddressBuffer_WIRE : { id : UInt<2>, addr : UInt<32>, len : UInt<8>, addr_valid : UInt<1>}
    _memDataReadAddressBuffer_WIRE.addr_valid <= UInt<1>("h0")
    _memDataReadAddressBuffer_WIRE.len <= UInt<3>("h7")
    _memDataReadAddressBuffer_WIRE.addr <= UInt<1>("h0")
    _memDataReadAddressBuffer_WIRE.id <= UInt<1>("h0")
    reg memDataReadAddressBuffer : { id : UInt<2>, addr : UInt<32>, len : UInt<8>, addr_valid : UInt<1>}, clock with :
      reset => (reset, _memDataReadAddressBuffer_WIRE) @[cache_phase1.scala 90:41]
    wire _memDataReadBuffer_WIRE : { data : UInt<256>, resp : UInt<2>, valid : UInt<1>}[8] @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[0].valid <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[0].resp <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[0].data <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[1].valid <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[1].resp <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[1].data <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[2].valid <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[2].resp <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[2].data <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[3].valid <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[3].resp <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[3].data <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[4].valid <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[4].resp <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[4].data <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[5].valid <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[5].resp <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[5].data <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[6].valid <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[6].resp <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[6].data <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[7].valid <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[7].resp <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    _memDataReadBuffer_WIRE[7].data <= UInt<1>("h0") @[cache_phase1.scala 115:42]
    reg memDataReadBuffer : { data : UInt<256>, resp : UInt<2>, valid : UInt<1>}[8], clock with :
      reset => (reset, _memDataReadBuffer_WIRE) @[cache_phase1.scala 115:34]
    reg memDataReadBufferID : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[cache_phase1.scala 125:36]
    reg B_data : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[cache_phase1.scala 128:24]
    wire _DataReadBuffer_WIRE : { data : UInt<64>, resp : UInt<2>, valid : UInt<1>}[8] @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[0].valid <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[0].resp <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[0].data <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[1].valid <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[1].resp <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[1].data <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[2].valid <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[2].resp <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[2].data <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[3].valid <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[3].resp <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[3].data <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[4].valid <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[4].resp <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[4].data <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[5].valid <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[5].resp <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[5].data <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[6].valid <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[6].resp <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[6].data <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[7].valid <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[7].resp <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    _DataReadBuffer_WIRE[7].data <= UInt<1>("h0") @[cache_phase1.scala 131:39]
    reg DataReadBuffer : { data : UInt<64>, resp : UInt<2>, valid : UInt<1>}[8], clock with :
      reset => (reset, _DataReadBuffer_WIRE) @[cache_phase1.scala 131:31]
    node offset = bits(inputReadAddrBuffer.addr, 7, 6) @[cache_phase1.scala 141:42]
    node _T = eq(UInt<4>("h0"), state) @[cache_phase1.scala 145:18]
    when _T : @[cache_phase1.scala 145:18]
      node _T_1 = and(io.axi.ARREADY, io.axi.ARVALID) @[cache_phase1.scala 148:33]
      when _T_1 : @[cache_phase1.scala 148:51]
        inputReadAddrBuffer.addr <= io.axi.ARADDR @[cache_phase1.scala 149:41]
        inputReadAddrBuffer.valid <= io.axi.ARVALID @[cache_phase1.scala 150:43]
        inputReadAddrBuffer.id <= io.axi.ARID @[cache_phase1.scala 153:40]
        state <= UInt<4>("h1") @[cache_phase1.scala 159:22]
      node _T_2 = and(io.axi.AWREADY, io.axi.AWVALID) @[cache_phase1.scala 162:33]
      when _T_2 : @[cache_phase1.scala 162:51]
        inputReadAddrBuffer.addr <= io.axi.AWADDR @[cache_phase1.scala 163:41]
        inputReadAddrBuffer.valid <= io.axi.AWVALID @[cache_phase1.scala 164:43]
        inputReadAddrBuffer.id <= io.axi.AWID @[cache_phase1.scala 167:40]
        state <= UInt<4>("h4") @[cache_phase1.scala 173:22]
    else :
      node _T_3 = eq(UInt<4>("h1"), state) @[cache_phase1.scala 145:18]
      when _T_3 : @[cache_phase1.scala 145:18]
        when cacheMem.io.hit : @[cache_phase1.scala 179:34]
          node _DataReadBuffer_0_data_T = bits(cacheMem.io.readData[offset], 511, 448) @[cache_phase1.scala 182:75]
          DataReadBuffer[0].data <= _DataReadBuffer_0_data_T @[cache_phase1.scala 182:44]
          DataReadBuffer[0].valid <= UInt<1>("h1") @[cache_phase1.scala 183:45]
          DataReadBuffer[0].resp <= UInt<1>("h0") @[cache_phase1.scala 184:44]
          node _DataReadBuffer_1_data_T = bits(cacheMem.io.readData[offset], 447, 384) @[cache_phase1.scala 182:75]
          DataReadBuffer[1].data <= _DataReadBuffer_1_data_T @[cache_phase1.scala 182:44]
          DataReadBuffer[1].valid <= UInt<1>("h1") @[cache_phase1.scala 183:45]
          DataReadBuffer[1].resp <= UInt<1>("h0") @[cache_phase1.scala 184:44]
          node _DataReadBuffer_2_data_T = bits(cacheMem.io.readData[offset], 383, 320) @[cache_phase1.scala 182:75]
          DataReadBuffer[2].data <= _DataReadBuffer_2_data_T @[cache_phase1.scala 182:44]
          DataReadBuffer[2].valid <= UInt<1>("h1") @[cache_phase1.scala 183:45]
          DataReadBuffer[2].resp <= UInt<1>("h0") @[cache_phase1.scala 184:44]
          node _DataReadBuffer_3_data_T = bits(cacheMem.io.readData[offset], 319, 256) @[cache_phase1.scala 182:75]
          DataReadBuffer[3].data <= _DataReadBuffer_3_data_T @[cache_phase1.scala 182:44]
          DataReadBuffer[3].valid <= UInt<1>("h1") @[cache_phase1.scala 183:45]
          DataReadBuffer[3].resp <= UInt<1>("h0") @[cache_phase1.scala 184:44]
          node _DataReadBuffer_4_data_T = bits(cacheMem.io.readData[offset], 255, 192) @[cache_phase1.scala 182:75]
          DataReadBuffer[4].data <= _DataReadBuffer_4_data_T @[cache_phase1.scala 182:44]
          DataReadBuffer[4].valid <= UInt<1>("h1") @[cache_phase1.scala 183:45]
          DataReadBuffer[4].resp <= UInt<1>("h0") @[cache_phase1.scala 184:44]
          node _DataReadBuffer_5_data_T = bits(cacheMem.io.readData[offset], 191, 128) @[cache_phase1.scala 182:75]
          DataReadBuffer[5].data <= _DataReadBuffer_5_data_T @[cache_phase1.scala 182:44]
          DataReadBuffer[5].valid <= UInt<1>("h1") @[cache_phase1.scala 183:45]
          DataReadBuffer[5].resp <= UInt<1>("h0") @[cache_phase1.scala 184:44]
          node _DataReadBuffer_6_data_T = bits(cacheMem.io.readData[offset], 127, 64) @[cache_phase1.scala 182:75]
          DataReadBuffer[6].data <= _DataReadBuffer_6_data_T @[cache_phase1.scala 182:44]
          DataReadBuffer[6].valid <= UInt<1>("h1") @[cache_phase1.scala 183:45]
          DataReadBuffer[6].resp <= UInt<1>("h0") @[cache_phase1.scala 184:44]
          node _DataReadBuffer_7_data_T = bits(cacheMem.io.readData[offset], 63, 0) @[cache_phase1.scala 182:75]
          DataReadBuffer[7].data <= _DataReadBuffer_7_data_T @[cache_phase1.scala 182:44]
          DataReadBuffer[7].valid <= UInt<1>("h1") @[cache_phase1.scala 183:45]
          DataReadBuffer[7].resp <= UInt<1>("h0") @[cache_phase1.scala 184:44]
          state <= UInt<4>("h3") @[cache_phase1.scala 186:27]
        when cacheMem.io.replace : @[cache_phase1.scala 189:38]
          node _replace_data_buffer_0_data_T = bits(cacheMem.io.readData[0], 511, 256) @[cache_phase1.scala 191:77]
          replace_data_buffer[0].data <= _replace_data_buffer_0_data_T @[cache_phase1.scala 191:51]
          node _replace_data_buffer_1_data_T = bits(cacheMem.io.readData[0], 255, 0) @[cache_phase1.scala 192:79]
          replace_data_buffer[1].data <= _replace_data_buffer_1_data_T @[cache_phase1.scala 192:53]
          replace_data_buffer[0].valid <= UInt<1>("h1") @[cache_phase1.scala 193:52]
          replace_data_buffer[1].valid <= UInt<1>("h1") @[cache_phase1.scala 194:54]
          node _replace_data_buffer_2_data_T = bits(cacheMem.io.readData[1], 511, 256) @[cache_phase1.scala 191:77]
          replace_data_buffer[2].data <= _replace_data_buffer_2_data_T @[cache_phase1.scala 191:51]
          node _replace_data_buffer_3_data_T = bits(cacheMem.io.readData[1], 255, 0) @[cache_phase1.scala 192:79]
          replace_data_buffer[3].data <= _replace_data_buffer_3_data_T @[cache_phase1.scala 192:53]
          replace_data_buffer[2].valid <= UInt<1>("h1") @[cache_phase1.scala 193:52]
          replace_data_buffer[3].valid <= UInt<1>("h1") @[cache_phase1.scala 194:54]
          node _replace_data_buffer_4_data_T = bits(cacheMem.io.readData[2], 511, 256) @[cache_phase1.scala 191:77]
          replace_data_buffer[4].data <= _replace_data_buffer_4_data_T @[cache_phase1.scala 191:51]
          node _replace_data_buffer_5_data_T = bits(cacheMem.io.readData[2], 255, 0) @[cache_phase1.scala 192:79]
          replace_data_buffer[5].data <= _replace_data_buffer_5_data_T @[cache_phase1.scala 192:53]
          replace_data_buffer[4].valid <= UInt<1>("h1") @[cache_phase1.scala 193:52]
          replace_data_buffer[5].valid <= UInt<1>("h1") @[cache_phase1.scala 194:54]
          node _replace_data_buffer_6_data_T = bits(cacheMem.io.readData[3], 511, 256) @[cache_phase1.scala 191:77]
          replace_data_buffer[6].data <= _replace_data_buffer_6_data_T @[cache_phase1.scala 191:51]
          node _replace_data_buffer_7_data_T = bits(cacheMem.io.readData[3], 255, 0) @[cache_phase1.scala 192:79]
          replace_data_buffer[7].data <= _replace_data_buffer_7_data_T @[cache_phase1.scala 192:53]
          replace_data_buffer[6].valid <= UInt<1>("h1") @[cache_phase1.scala 193:52]
          replace_data_buffer[7].valid <= UInt<1>("h1") @[cache_phase1.scala 194:54]
          replace_address_Buffer.valid <= UInt<1>("h1") @[cache_phase1.scala 197:45]
          replace_address_Buffer.addr <= cacheMem.io.replace_addr @[cache_phase1.scala 198:45]
        node _T_4 = and(io.mem_axi.ARREADY, io.mem_axi.ARVALID) @[cache_phase1.scala 201:37]
        when _T_4 : @[cache_phase1.scala 201:60]
          state <= UInt<4>("h2") @[cache_phase1.scala 202:23]
      else :
        node _T_5 = eq(UInt<4>("h2"), state) @[cache_phase1.scala 145:18]
        when _T_5 : @[cache_phase1.scala 145:18]
          node _T_6 = and(io.mem_axi.RVALID, io.mem_axi.RREADY) @[cache_phase1.scala 207:36]
          when _T_6 : @[cache_phase1.scala 207:57]
            memDataReadBuffer[memReadBeatCounter].data <= io.mem_axi.RDATA @[cache_phase1.scala 208:59]
            memDataReadBuffer[memReadBeatCounter].valid <= io.mem_axi.RVALID @[cache_phase1.scala 209:60]
            memDataReadBuffer[memReadBeatCounter].resp <= io.mem_axi.RRESP @[cache_phase1.scala 210:60]
            node _memReadBeatCounter_T = add(memReadBeatCounter, UInt<1>("h1")) @[cache_phase1.scala 211:57]
            node _memReadBeatCounter_T_1 = tail(_memReadBeatCounter_T, 1) @[cache_phase1.scala 211:57]
            memReadBeatCounter <= _memReadBeatCounter_T_1 @[cache_phase1.scala 211:36]
            memDataReadBufferID <= io.mem_axi.RID @[cache_phase1.scala 212:36]
            when io.mem_axi.RLAST : @[cache_phase1.scala 214:39]
              when inputDataBuffer[0].valid : @[cache_phase1.scala 215:51]
                node _T_7 = eq(replace_address_Buffer.valid, UInt<1>("h0")) @[cache_phase1.scala 216:30]
                when _T_7 : @[cache_phase1.scala 216:60]
                  state <= UInt<4>("h0") @[cache_phase1.scala 217:34]
                else :
                  state <= UInt<4>("h5") @[cache_phase1.scala 219:34]
              else :
                state <= UInt<4>("h3") @[cache_phase1.scala 222:30]
                cacheMem.io.addr <= memDataReadAddressBuffer.addr @[cache_phase1.scala 223:42]
        else :
          node _T_8 = eq(UInt<4>("h3"), state) @[cache_phase1.scala 145:18]
          when _T_8 : @[cache_phase1.scala 145:18]
            node _T_9 = and(io.axi.RVALID, io.axi.RREADY) @[cache_phase1.scala 232:32]
            when _T_9 : @[cache_phase1.scala 232:50]
              node _coreReadBeatCounter_T = add(coreReadBeatCounter, UInt<1>("h1")) @[cache_phase1.scala 233:60]
              node _coreReadBeatCounter_T_1 = tail(_coreReadBeatCounter_T, 1) @[cache_phase1.scala 233:60]
              coreReadBeatCounter <= _coreReadBeatCounter_T_1 @[cache_phase1.scala 233:37]
              when io.axi.RLAST : @[cache_phase1.scala 235:35]
                inputReadAddrBuffer.valid <= UInt<1>("h0") @[cache_phase1.scala 237:47]
                memDataReadBuffer[0].valid <= UInt<1>("h0") @[cache_phase1.scala 238:69]
                memDataReadBuffer[1].valid <= UInt<1>("h0") @[cache_phase1.scala 238:69]
                memDataReadBuffer[2].valid <= UInt<1>("h0") @[cache_phase1.scala 238:69]
                memDataReadBuffer[3].valid <= UInt<1>("h0") @[cache_phase1.scala 238:69]
                memDataReadBuffer[4].valid <= UInt<1>("h0") @[cache_phase1.scala 238:69]
                memDataReadBuffer[5].valid <= UInt<1>("h0") @[cache_phase1.scala 238:69]
                memDataReadBuffer[6].valid <= UInt<1>("h0") @[cache_phase1.scala 238:69]
                memDataReadBuffer[7].valid <= UInt<1>("h0") @[cache_phase1.scala 238:69]
                node _T_10 = eq(replace_address_Buffer.valid, UInt<1>("h0")) @[cache_phase1.scala 239:26]
                when _T_10 : @[cache_phase1.scala 239:56]
                  memDataReadBuffer[0].valid <= UInt<1>("h0") @[cache_phase1.scala 240:58]
                  memDataReadBuffer[1].valid <= UInt<1>("h0") @[cache_phase1.scala 240:58]
                  memDataReadBuffer[2].valid <= UInt<1>("h0") @[cache_phase1.scala 240:58]
                  memDataReadBuffer[3].valid <= UInt<1>("h0") @[cache_phase1.scala 240:58]
                  memDataReadBuffer[4].valid <= UInt<1>("h0") @[cache_phase1.scala 240:58]
                  memDataReadBuffer[5].valid <= UInt<1>("h0") @[cache_phase1.scala 240:58]
                  memDataReadBuffer[6].valid <= UInt<1>("h0") @[cache_phase1.scala 240:58]
                  memDataReadBuffer[7].valid <= UInt<1>("h0") @[cache_phase1.scala 240:58]
                  state <= UInt<4>("h0") @[cache_phase1.scala 241:30]
                else :
                  state <= UInt<4>("h5") @[cache_phase1.scala 243:30]
          else :
            node _T_11 = eq(UInt<4>("h4"), state) @[cache_phase1.scala 145:18]
            when _T_11 : @[cache_phase1.scala 145:18]
              node _T_12 = and(io.axi.WREADY, io.axi.WVALID) @[cache_phase1.scala 251:32]
              when _T_12 : @[cache_phase1.scala 251:49]
                inputDataBuffer[coreDataWriteCounter].data <= io.axi.WDATA @[cache_phase1.scala 252:59]
                inputDataBuffer[coreDataWriteCounter].valid <= io.axi.WVALID @[cache_phase1.scala 253:61]
                node _coreDataWriteCounter_T = add(coreDataWriteCounter, UInt<1>("h1")) @[cache_phase1.scala 255:62]
                node _coreDataWriteCounter_T_1 = tail(_coreDataWriteCounter_T, 1) @[cache_phase1.scala 255:62]
                coreDataWriteCounter <= _coreDataWriteCounter_T_1 @[cache_phase1.scala 255:38]
                when io.axi.WLAST : @[cache_phase1.scala 257:35]
                  state <= UInt<4>("h8") @[cache_phase1.scala 258:31]
            else :
              node _T_13 = eq(UInt<4>("h5"), state) @[cache_phase1.scala 145:18]
              when _T_13 : @[cache_phase1.scala 145:18]
                node _T_14 = and(io.mem_axi.AWREADY, io.mem_axi.AWVALID) @[cache_phase1.scala 267:37]
                when _T_14 : @[cache_phase1.scala 267:59]
                  state <= UInt<4>("h6") @[cache_phase1.scala 268:23]
              else :
                node _T_15 = eq(UInt<4>("h6"), state) @[cache_phase1.scala 145:18]
                when _T_15 : @[cache_phase1.scala 145:18]
                  node _T_16 = and(io.mem_axi.WREADY, io.mem_axi.WVALID) @[cache_phase1.scala 273:36]
                  when _T_16 : @[cache_phase1.scala 273:57]
                    node _memDataWriteCounter_T = add(memDataWriteCounter, UInt<1>("h1")) @[cache_phase1.scala 274:60]
                    node _memDataWriteCounter_T_1 = tail(_memDataWriteCounter_T, 1) @[cache_phase1.scala 274:60]
                    memDataWriteCounter <= _memDataWriteCounter_T_1 @[cache_phase1.scala 274:37]
                    when io.mem_axi.WLAST : @[cache_phase1.scala 276:39]
                      state <= UInt<4>("h7") @[cache_phase1.scala 277:27]
                else :
                  node _T_17 = eq(UInt<4>("h7"), state) @[cache_phase1.scala 145:18]
                  when _T_17 : @[cache_phase1.scala 145:18]
                    node _T_18 = and(io.mem_axi.BREADY, io.mem_axi.BVALID) @[cache_phase1.scala 283:36]
                    when _T_18 : @[cache_phase1.scala 283:57]
                      B_data <= io.mem_axi.BRESP @[cache_phase1.scala 284:24]
                      state <= UInt<4>("h0") @[cache_phase1.scala 285:23]
                      replace_address_Buffer.valid <= UInt<1>("h0") @[cache_phase1.scala 286:45]
                      replace_data_buffer[0].valid <= UInt<1>("h0") @[cache_phase1.scala 287:53]
                      replace_data_buffer[1].valid <= UInt<1>("h0") @[cache_phase1.scala 287:53]
                      replace_data_buffer[2].valid <= UInt<1>("h0") @[cache_phase1.scala 287:53]
                      replace_data_buffer[3].valid <= UInt<1>("h0") @[cache_phase1.scala 287:53]
                      replace_data_buffer[4].valid <= UInt<1>("h0") @[cache_phase1.scala 287:53]
                      replace_data_buffer[5].valid <= UInt<1>("h0") @[cache_phase1.scala 287:53]
                      replace_data_buffer[6].valid <= UInt<1>("h0") @[cache_phase1.scala 287:53]
                      replace_data_buffer[7].valid <= UInt<1>("h0") @[cache_phase1.scala 287:53]
                  else :
                    node _T_19 = eq(UInt<4>("h8"), state) @[cache_phase1.scala 145:18]
                    when _T_19 : @[cache_phase1.scala 145:18]
                      node _T_20 = and(io.axi.BREADY, io.axi.BVALID) @[cache_phase1.scala 293:32]
                      when _T_20 : @[cache_phase1.scala 293:49]
                        when cacheMem.io.hit : @[cache_phase1.scala 294:38]
                          B_data <= UInt<1>("h0") @[cache_phase1.scala 295:31]
                          state <= UInt<4>("h0") @[cache_phase1.scala 296:31]
                        else :
                          state <= UInt<4>("h1") @[cache_phase1.scala 298:31]
    node _io_axi_ARREADY_T = eq(state, UInt<4>("h0")) @[cache_phase1.scala 305:29]
    io.axi.ARREADY <= _io_axi_ARREADY_T @[cache_phase1.scala 305:20]
    io.mem_axi.ARID <= memDataReadAddressBuffer.id @[cache_phase1.scala 308:21]
    io.mem_axi.ARADDR <= memDataReadAddressBuffer.addr @[cache_phase1.scala 309:23]
    node _io_mem_axi_ARVALID_T = eq(state, UInt<4>("h1")) @[cache_phase1.scala 310:33]
    node _io_mem_axi_ARVALID_T_1 = and(_io_mem_axi_ARVALID_T, memDataReadAddressBuffer.addr_valid) @[cache_phase1.scala 310:45]
    node _io_mem_axi_ARVALID_T_2 = eq(cacheMem.io.hit, UInt<1>("h0")) @[cache_phase1.scala 310:87]
    node _io_mem_axi_ARVALID_T_3 = and(_io_mem_axi_ARVALID_T_1, _io_mem_axi_ARVALID_T_2) @[cache_phase1.scala 310:84]
    io.mem_axi.ARVALID <= _io_mem_axi_ARVALID_T_3 @[cache_phase1.scala 310:24]
    io.mem_axi.ARLEN <= UInt<3>("h7") @[cache_phase1.scala 311:22]
    io.mem_axi.ARSIZE <= UInt<3>("h5") @[cache_phase1.scala 312:23]
    io.mem_axi.ARBURST <= UInt<1>("h1") @[cache_phase1.scala 313:24]
    io.mem_axi.ARCACHE <= UInt<2>("h2") @[cache_phase1.scala 314:24]
    io.mem_axi.ARLOCK <= UInt<1>("h0") @[cache_phase1.scala 315:23]
    io.mem_axi.ARPROT <= UInt<1>("h0") @[cache_phase1.scala 316:23]
    io.mem_axi.ARQOS <= UInt<1>("h0") @[cache_phase1.scala 317:22]
    node _io_mem_axi_RREADY_T = eq(state, UInt<4>("h2")) @[cache_phase1.scala 320:32]
    io.mem_axi.RREADY <= _io_mem_axi_RREADY_T @[cache_phase1.scala 320:23]
    io.axi.RDATA <= DataReadBuffer[coreReadBeatCounter].data @[cache_phase1.scala 322:18]
    io.axi.RID <= memDataReadBufferID @[cache_phase1.scala 323:16]
    node _io_axi_RVALID_T = eq(state, UInt<4>("h3")) @[cache_phase1.scala 324:28]
    node _io_axi_RVALID_T_1 = and(_io_axi_RVALID_T, DataReadBuffer[coreReadBeatCounter].valid) @[cache_phase1.scala 324:40]
    io.axi.RVALID <= _io_axi_RVALID_T_1 @[cache_phase1.scala 324:19]
    io.axi.RRESP <= DataReadBuffer[coreReadBeatCounter].resp @[cache_phase1.scala 325:18]
    node _io_axi_RLAST_T = eq(coreReadBeatCounter, inputReadAddrBuffer.len) @[cache_phase1.scala 326:41]
    node _io_axi_RLAST_T_1 = eq(state, UInt<4>("h3")) @[cache_phase1.scala 326:76]
    node _io_axi_RLAST_T_2 = and(_io_axi_RLAST_T, _io_axi_RLAST_T_1) @[cache_phase1.scala 326:68]
    io.axi.RLAST <= _io_axi_RLAST_T_2 @[cache_phase1.scala 326:18]
    node _io_axi_AWREADY_T = eq(state, UInt<4>("h0")) @[cache_phase1.scala 330:29]
    io.axi.AWREADY <= _io_axi_AWREADY_T @[cache_phase1.scala 330:20]
    node _io_axi_WREADY_T = eq(state, UInt<4>("h4")) @[cache_phase1.scala 332:28]
    io.axi.WREADY <= _io_axi_WREADY_T @[cache_phase1.scala 332:19]
    io.mem_axi.WDATA <= replace_data_buffer[memDataWriteCounter].data @[cache_phase1.scala 334:21]
    node _io_mem_axi_WVALID_T = eq(state, UInt<4>("h6")) @[cache_phase1.scala 335:30]
    node _io_mem_axi_WVALID_T_1 = and(_io_mem_axi_WVALID_T, replace_data_buffer[memDataWriteCounter].valid) @[cache_phase1.scala 335:43]
    io.mem_axi.WVALID <= _io_mem_axi_WVALID_T_1 @[cache_phase1.scala 335:22]
    io.mem_axi.WSTRB <= UInt<8>("hff") @[cache_phase1.scala 336:22]
    node _io_mem_axi_WLAST_T = eq(memDataWriteCounter, memDataReadAddressBuffer.len) @[cache_phase1.scala 337:44]
    io.mem_axi.WLAST <= _io_mem_axi_WLAST_T @[cache_phase1.scala 337:22]
    io.mem_axi.AWADDR <= replace_address_Buffer.addr @[cache_phase1.scala 339:23]
    node _io_mem_axi_AWVALID_T = eq(state, UInt<4>("h5")) @[cache_phase1.scala 340:33]
    node _io_mem_axi_AWVALID_T_1 = and(_io_mem_axi_AWVALID_T, replace_address_Buffer.valid) @[cache_phase1.scala 340:46]
    io.mem_axi.AWVALID <= _io_mem_axi_AWVALID_T_1 @[cache_phase1.scala 340:24]
    io.mem_axi.AWBURST <= UInt<1>("h1") @[cache_phase1.scala 341:24]
    io.mem_axi.AWID <= UInt<1>("h0") @[cache_phase1.scala 342:21]
    io.mem_axi.AWLEN <= UInt<3>("h7") @[cache_phase1.scala 343:22]
    io.mem_axi.AWCACHE <= UInt<2>("h2") @[cache_phase1.scala 344:24]
    io.mem_axi.AWLOCK <= UInt<1>("h0") @[cache_phase1.scala 345:23]
    io.mem_axi.AWSIZE <= UInt<3>("h5") @[cache_phase1.scala 346:23]
    io.mem_axi.AWPROT <= UInt<1>("h0") @[cache_phase1.scala 347:23]
    io.mem_axi.AWQOS <= UInt<1>("h0") @[cache_phase1.scala 348:22]
    node _io_mem_axi_BREADY_T = eq(state, UInt<4>("h7")) @[cache_phase1.scala 351:32]
    io.mem_axi.BREADY <= _io_mem_axi_BREADY_T @[cache_phase1.scala 351:23]
    io.axi.BRESP <= B_data @[cache_phase1.scala 353:18]
    node _io_axi_BVALID_T = eq(state, UInt<4>("h8")) @[cache_phase1.scala 354:28]
    io.axi.BVALID <= _io_axi_BVALID_T @[cache_phase1.scala 354:19]
    memDataReadAddressBuffer.addr <= inputReadAddrBuffer.addr @[cache_phase1.scala 357:35]
    memDataReadAddressBuffer.addr_valid <= inputReadAddrBuffer.valid @[cache_phase1.scala 358:41]
    memDataReadAddressBuffer.len <= inputReadAddrBuffer.len @[cache_phase1.scala 359:34]
    memDataReadAddressBuffer.id <= inputReadAddrBuffer.id @[cache_phase1.scala 362:33]
    cacheMem.io.addr <= inputReadAddrBuffer.addr @[cache_phase1.scala 374:22]
    reg delay_RLAST : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[cache_phase1.scala 377:30]
    reg delay_WLAST : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[cache_phase1.scala 378:30]
    delay_RLAST <= io.mem_axi.RLAST @[cache_phase1.scala 380:17]
    delay_WLAST <= io.axi.WLAST @[cache_phase1.scala 381:17]
    cacheMem.io.full_line <= delay_RLAST @[cache_phase1.scala 384:27]
    node _cacheMem_io_writeEnable_T = and(delay_WLAST, cacheMem.io.hit) @[cache_phase1.scala 385:60]
    node _cacheMem_io_writeEnable_T_1 = or(delay_RLAST, _cacheMem_io_writeEnable_T) @[cache_phase1.scala 385:44]
    cacheMem.io.writeEnable <= _cacheMem_io_writeEnable_T_1 @[cache_phase1.scala 385:29]
    wire temp : UInt<512>[4] @[cache_phase1.scala 387:20]
    temp <= cacheMem.io.readData @[cache_phase1.scala 388:10]
    node temp_lo_lo = cat(inputDataBuffer[6].data, inputDataBuffer[7].data) @[Cat.scala 33:92]
    node temp_lo_hi = cat(inputDataBuffer[4].data, inputDataBuffer[5].data) @[Cat.scala 33:92]
    node temp_lo = cat(temp_lo_hi, temp_lo_lo) @[Cat.scala 33:92]
    node temp_hi_lo = cat(inputDataBuffer[2].data, inputDataBuffer[3].data) @[Cat.scala 33:92]
    node temp_hi_hi = cat(inputDataBuffer[0].data, inputDataBuffer[1].data) @[Cat.scala 33:92]
    node temp_hi = cat(temp_hi_hi, temp_hi_lo) @[Cat.scala 33:92]
    node _temp_T = cat(temp_hi, temp_lo) @[Cat.scala 33:92]
    temp[offset] <= _temp_T @[cache_phase1.scala 390:18]
    wire data_wire : UInt<512>[4] @[cache_phase1.scala 402:24]
    wire data_wire_valid : UInt<1>[4] @[cache_phase1.scala 403:31]
    node _data_wire_0_T = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 33:92]
    node _data_wire_0_T_1 = cat(UInt<1>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _data_wire_0_T_2 = cat(memDataReadBuffer[_data_wire_0_T].data, memDataReadBuffer[_data_wire_0_T_1].data) @[Cat.scala 33:92]
    data_wire[0] <= _data_wire_0_T_2 @[cache_phase1.scala 407:22]
    node _data_wire_valid_0_T = cat(UInt<1>("h0"), UInt<1>("h0")) @[Cat.scala 33:92]
    node _data_wire_valid_0_T_1 = cat(UInt<1>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _data_wire_valid_0_T_2 = and(memDataReadBuffer[_data_wire_valid_0_T].valid, memDataReadBuffer[_data_wire_valid_0_T_1].valid) @[cache_phase1.scala 408:75]
    data_wire_valid[0] <= _data_wire_valid_0_T_2 @[cache_phase1.scala 408:28]
    node _data_wire_1_T = cat(UInt<1>("h1"), UInt<1>("h0")) @[Cat.scala 33:92]
    node _data_wire_1_T_1 = cat(UInt<1>("h1"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _data_wire_1_T_2 = cat(memDataReadBuffer[_data_wire_1_T].data, memDataReadBuffer[_data_wire_1_T_1].data) @[Cat.scala 33:92]
    data_wire[1] <= _data_wire_1_T_2 @[cache_phase1.scala 407:22]
    node _data_wire_valid_1_T = cat(UInt<1>("h1"), UInt<1>("h0")) @[Cat.scala 33:92]
    node _data_wire_valid_1_T_1 = cat(UInt<1>("h1"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _data_wire_valid_1_T_2 = and(memDataReadBuffer[_data_wire_valid_1_T].valid, memDataReadBuffer[_data_wire_valid_1_T_1].valid) @[cache_phase1.scala 408:75]
    data_wire_valid[1] <= _data_wire_valid_1_T_2 @[cache_phase1.scala 408:28]
    node _data_wire_2_T = cat(UInt<2>("h2"), UInt<1>("h0")) @[Cat.scala 33:92]
    node _data_wire_2_T_1 = cat(UInt<2>("h2"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _data_wire_2_T_2 = cat(memDataReadBuffer[_data_wire_2_T].data, memDataReadBuffer[_data_wire_2_T_1].data) @[Cat.scala 33:92]
    data_wire[2] <= _data_wire_2_T_2 @[cache_phase1.scala 407:22]
    node _data_wire_valid_2_T = cat(UInt<2>("h2"), UInt<1>("h0")) @[Cat.scala 33:92]
    node _data_wire_valid_2_T_1 = cat(UInt<2>("h2"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _data_wire_valid_2_T_2 = and(memDataReadBuffer[_data_wire_valid_2_T].valid, memDataReadBuffer[_data_wire_valid_2_T_1].valid) @[cache_phase1.scala 408:75]
    data_wire_valid[2] <= _data_wire_valid_2_T_2 @[cache_phase1.scala 408:28]
    node _data_wire_3_T = cat(UInt<2>("h3"), UInt<1>("h0")) @[Cat.scala 33:92]
    node _data_wire_3_T_1 = cat(UInt<2>("h3"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _data_wire_3_T_2 = cat(memDataReadBuffer[_data_wire_3_T].data, memDataReadBuffer[_data_wire_3_T_1].data) @[Cat.scala 33:92]
    data_wire[3] <= _data_wire_3_T_2 @[cache_phase1.scala 407:22]
    node _data_wire_valid_3_T = cat(UInt<2>("h3"), UInt<1>("h0")) @[Cat.scala 33:92]
    node _data_wire_valid_3_T_1 = cat(UInt<2>("h3"), UInt<1>("h1")) @[Cat.scala 33:92]
    node _data_wire_valid_3_T_2 = and(memDataReadBuffer[_data_wire_valid_3_T].valid, memDataReadBuffer[_data_wire_valid_3_T_1].valid) @[cache_phase1.scala 408:75]
    data_wire_valid[3] <= _data_wire_valid_3_T_2 @[cache_phase1.scala 408:28]
    when inputDataBuffer[0].valid : @[cache_phase1.scala 412:35]
      node data_wire_lo_lo = cat(inputDataBuffer[6].data, inputDataBuffer[7].data) @[Cat.scala 33:92]
      node data_wire_lo_hi = cat(inputDataBuffer[4].data, inputDataBuffer[5].data) @[Cat.scala 33:92]
      node data_wire_lo = cat(data_wire_lo_hi, data_wire_lo_lo) @[Cat.scala 33:92]
      node data_wire_hi_lo = cat(inputDataBuffer[2].data, inputDataBuffer[3].data) @[Cat.scala 33:92]
      node data_wire_hi_hi = cat(inputDataBuffer[0].data, inputDataBuffer[1].data) @[Cat.scala 33:92]
      node data_wire_hi = cat(data_wire_hi_hi, data_wire_hi_lo) @[Cat.scala 33:92]
      node _data_wire_T = cat(data_wire_hi, data_wire_lo) @[Cat.scala 33:92]
      data_wire[offset] <= _data_wire_T @[cache_phase1.scala 414:27]
    when data_wire_valid[offset] : @[cache_phase1.scala 428:34]
      node _DataReadBuffer_0_data_T_1 = bits(data_wire[offset], 511, 448) @[cache_phase1.scala 430:56]
      DataReadBuffer[0].data <= _DataReadBuffer_0_data_T_1 @[cache_phase1.scala 430:36]
      DataReadBuffer[0].valid <= data_wire_valid[offset] @[cache_phase1.scala 431:37]
      DataReadBuffer[0].resp <= UInt<1>("h0") @[cache_phase1.scala 432:36]
      node _DataReadBuffer_1_data_T_1 = bits(data_wire[offset], 447, 384) @[cache_phase1.scala 430:56]
      DataReadBuffer[1].data <= _DataReadBuffer_1_data_T_1 @[cache_phase1.scala 430:36]
      DataReadBuffer[1].valid <= data_wire_valid[offset] @[cache_phase1.scala 431:37]
      DataReadBuffer[1].resp <= UInt<1>("h0") @[cache_phase1.scala 432:36]
      node _DataReadBuffer_2_data_T_1 = bits(data_wire[offset], 383, 320) @[cache_phase1.scala 430:56]
      DataReadBuffer[2].data <= _DataReadBuffer_2_data_T_1 @[cache_phase1.scala 430:36]
      DataReadBuffer[2].valid <= data_wire_valid[offset] @[cache_phase1.scala 431:37]
      DataReadBuffer[2].resp <= UInt<1>("h0") @[cache_phase1.scala 432:36]
      node _DataReadBuffer_3_data_T_1 = bits(data_wire[offset], 319, 256) @[cache_phase1.scala 430:56]
      DataReadBuffer[3].data <= _DataReadBuffer_3_data_T_1 @[cache_phase1.scala 430:36]
      DataReadBuffer[3].valid <= data_wire_valid[offset] @[cache_phase1.scala 431:37]
      DataReadBuffer[3].resp <= UInt<1>("h0") @[cache_phase1.scala 432:36]
      node _DataReadBuffer_4_data_T_1 = bits(data_wire[offset], 255, 192) @[cache_phase1.scala 430:56]
      DataReadBuffer[4].data <= _DataReadBuffer_4_data_T_1 @[cache_phase1.scala 430:36]
      DataReadBuffer[4].valid <= data_wire_valid[offset] @[cache_phase1.scala 431:37]
      DataReadBuffer[4].resp <= UInt<1>("h0") @[cache_phase1.scala 432:36]
      node _DataReadBuffer_5_data_T_1 = bits(data_wire[offset], 191, 128) @[cache_phase1.scala 430:56]
      DataReadBuffer[5].data <= _DataReadBuffer_5_data_T_1 @[cache_phase1.scala 430:36]
      DataReadBuffer[5].valid <= data_wire_valid[offset] @[cache_phase1.scala 431:37]
      DataReadBuffer[5].resp <= UInt<1>("h0") @[cache_phase1.scala 432:36]
      node _DataReadBuffer_6_data_T_1 = bits(data_wire[offset], 127, 64) @[cache_phase1.scala 430:56]
      DataReadBuffer[6].data <= _DataReadBuffer_6_data_T_1 @[cache_phase1.scala 430:36]
      DataReadBuffer[6].valid <= data_wire_valid[offset] @[cache_phase1.scala 431:37]
      DataReadBuffer[6].resp <= UInt<1>("h0") @[cache_phase1.scala 432:36]
      node _DataReadBuffer_7_data_T_1 = bits(data_wire[offset], 63, 0) @[cache_phase1.scala 430:56]
      DataReadBuffer[7].data <= _DataReadBuffer_7_data_T_1 @[cache_phase1.scala 430:36]
      DataReadBuffer[7].valid <= data_wire_valid[offset] @[cache_phase1.scala 431:37]
      DataReadBuffer[7].resp <= UInt<1>("h0") @[cache_phase1.scala 432:36]
    node _T_21 = mux(delay_RLAST, data_wire, temp) @[cache_phase1.scala 438:33]
    cacheMem.io.writeData[0] <= _T_21[0] @[cache_phase1.scala 438:27]
    cacheMem.io.writeData[1] <= _T_21[1] @[cache_phase1.scala 438:27]
    cacheMem.io.writeData[2] <= _T_21[2] @[cache_phase1.scala 438:27]
    cacheMem.io.writeData[3] <= _T_21[3] @[cache_phase1.scala 438:27]
    node _cacheMem_io_hit_ready_T = eq(state, UInt<4>("h1")) @[cache_phase1.scala 442:36]
    node _cacheMem_io_hit_ready_T_1 = eq(state, UInt<4>("h8")) @[cache_phase1.scala 442:56]
    node _cacheMem_io_hit_ready_T_2 = or(_cacheMem_io_hit_ready_T, _cacheMem_io_hit_ready_T_1) @[cache_phase1.scala 442:48]
    cacheMem.io.hit_ready <= _cacheMem_io_hit_ready_T_2 @[cache_phase1.scala 442:27]
    node _cacheMem_io_replace_ready_T = eq(state, UInt<4>("h1")) @[cache_phase1.scala 443:40]
    node _cacheMem_io_replace_ready_T_1 = eq(replace_address_Buffer.valid, UInt<1>("h0")) @[cache_phase1.scala 443:56]
    node _cacheMem_io_replace_ready_T_2 = and(_cacheMem_io_replace_ready_T, _cacheMem_io_replace_ready_T_1) @[cache_phase1.scala 443:53]
    cacheMem.io.replace_ready <= _cacheMem_io_replace_ready_T_2 @[cache_phase1.scala 443:31]

